Reading Data Using @ConfigurationProperties Annotation :-

    When you need to read multiple lines of data from application.properties or application.yml, 
    using @Value or the Environment interface is not efficient, as they can only read one property at a time.

    To efficiently read multiple properties, we use @ConfigurationProperties.

Example Scenario :-

      If you have the following configuration in application.yml:

     application.yml :-
     _______________

 accounts:
  message: "Welcome to EazyBank accounts related local APIs"
  contactDetails:
    name: "John Doe - Developer"
    email: "john@eazybank.com"
  onCallSupport:
    - "(555) 555-1234"
    - "(555) 523-1345"



      Here,

        message stores a String value.
        contactDetails stores key-value pairs (like a Map).
        onCallSupport stores a List of Strings.

Step 1: Create AccountContactInfo.java to Bind Properties :-

    ðŸ“„ AccountContactInfo.java :-

      package in.Accounts.dto;

      import java.util.List;
      import java.util.Map;
      import org.springframework.boot.context.properties.ConfigurationProperties;

      @ConfigurationProperties(prefix = "accounts")
      public record AccountContactInfo(String message, Map<String, String> contactDetails, List<String> onCallSupport) {
      //here these variable names should maytch with application.properties file
      }


      Explanation
        @ConfigurationProperties(prefix = "accounts"):
        Reads configuration properties starting with accounts from application.yml or application.properties.
        Uses a Java record (introduced in Java 14) to automatically generate getters, constructors, and toString().


      Step 2: Enable @ConfigurationProperties in Application.java :-

        ðŸ“„ Application.java :-
          _____________________

          package in.Accounts;

          import org.springframework.boot.SpringApplication;
          import org.springframework.boot.autoconfigure.SpringBootApplication;
          import org.springframework.boot.context.properties.EnableConfigurationProperties;
          import in.Accounts.dto.AccountContactInfo;

          @SpringBootApplication
          @EnableConfigurationProperties(AccountContactInfo.class)
          public class Application {
              public static void main(String[] args) {
                  SpringApplication.run(Application.class, args);
              }
          }

          Explanation -
          
              @EnableConfigurationProperties(AccountContactInfo.class):
              Enables automatic binding of configuration properties to AccountContactInfo.

      Step 3: Use AccountContactInfo in a Controller :-

        ðŸ“„ AccountsController.java :-
          ________________________________

          package in.Accounts.controller;

          import org.springframework.http.HttpStatus;
          import org.springframework.http.ResponseEntity;
          import org.springframework.web.bind.annotation.GetMapping;
          import org.springframework.web.bind.annotation.RequestMapping;
          import org.springframework.web.bind.annotation.RestController;
          import org.springframework.beans.factory.annotation.Autowired;
          import in.Accounts.dto.AccountContactInfo;

          @RestController
          @RequestMapping("/accounts")
          public class AccountsController {

          @Autowired
          private AccountContactInfo accountContactInfo;

          @GetMapping("/contact-info")
          public ResponseEntity<AccountContactInfo> getContactInfo() {
            return ResponseEntity.status(HttpStatus.OK).body(accountContactInfo);
            }
          }

      Explanation -

        @RestController instead of @Controller:
        This ensures that the returned AccountContactInfo is automatically converted to JSON.
        @Autowired private AccountContactInfo accountContactInfo;
        Injects the read properties from application.yml into this class.







